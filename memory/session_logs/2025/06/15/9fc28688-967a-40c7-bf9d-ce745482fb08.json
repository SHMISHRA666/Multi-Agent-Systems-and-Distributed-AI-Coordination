{
  "session_id": "9fc28688-967a-40c7-bf9d-ce745482fb08",
  "original_query": "Tell me about markitdown-mcp mentioned in markitdown",
  "perception": {
    "entities": [
      "markitdown-mcp",
      "markitdown"
    ],
    "result_requirement": "Information about markitdown-mcp mentioned in markitdown",
    "original_goal_achieved": false,
    "reasoning": "The user is asking for information about 'markitdown-mcp' within the context of 'markitdown'. This requires looking up information about 'markitdown-mcp' and how it relates to 'markitdown'. I don't have enough information to answer without using tools.",
    "local_goal_achieved": false,
    "local_reasoning": "The query requires external information to be fetched, so it's not locally achievable.",
    "last_tooluse_summary": "Not applicable",
    "solution_summary": "Not ready yet",
    "confidence": "0.9"
  },
  "plan_versions": [
    {
      "plan_text": [
        "Step 0: Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
        "Step 1: Search for information about markitdown-mcp and markitdown using duckduckgo_search_results.",
        "Step 2: Combine and summarize the information found from both sources to provide an answer."
      ],
      "steps": [
        {
          "index": 0,
          "description": "Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
          "type": "CODE",
          "code": {
            "tool_name": "raw_code_block",
            "tool_arguments": {
              "code": "result = search_stored_documents_rag(\"markitdown-mcp and markitdown\")\nreturn result"
            }
          },
          "conclusion": "",
          "execution_result": {
            "status": "success",
            "result": "['type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\\'# DELETE IMAGES **Image:** def replace_image(markdown: str) -> str: alt = match.group(1) src = match.group(2) try: caption = get_caption(src) # Attempt to delete only if src is local if not src.startswith(\"http\"): img_path = Path(src).parent / \"documents\" / src if img_path.exists(): log(\"INFO\", f\"Deleted image: {img_path}\") return f\"**{caption}**\" else: log(\"WARN\", f\"Image path does not exist\") return f\"**{caption}**\" except Exception as e: log(\"WARN\", f\"Image could not be processed: {e}\") return re.sub(r\\\\\\'!\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\((.*?)\\\\\\\\)\\\\\\', r\\\\\\'!\\\\\\\\[\\\\\\\\1\\\\\\\\](\\\\\\\\2)\\\\\\', markdown) And that\u2019s how we delete images. -----\\\\n[Source: DELETE_IMAGES.pdf, ID: DELETE_IMAGES_0]\\' annotations=None', 'type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', \"type='text' text='programme includes building/ asset communication, feedback sessions with individual tenants and providing feedback to tenants on efficient energy and water consumption. 3. \\\\x07Mechanisms in place to inform consumers of any risk of disruption/ discontinuation of essential services. Any risk of disruption/ discontinuation of essential services is timely communicated to customers occupying the leased properties, through e-mail communication by the FM Teams. 4. \\\\x07Does the entity display product information on the product over and above what is mandated as per local laws? (Y/ N/ Not Applicable). If yes, provide details in brief. Products of DLF include development of residential homes and development, operation and maintenance of commercial office spaces, retail properties (Malls) and hospitality projects (Hotels and Clubs). Product related information is included in the relevant documents provided to the customers at the time of building handover or while entering into a lease agreement, which is as per the local legislation. Content In addition to this, customers are provided with a user handbook which includes information on building features and guidelines for ensuring safe and responsible usage of buildings. Furthermore, majority of its buildings have received LEED certification in \u2018Operation and Maintenance\u2019 category or \u2018Design and Construction\u2019 category by USGBC. Information related to LEED certifications are displayed in all leased buildings. \\\\x07Did your entity carry out any survey with regard to consumer satisfaction relating to the major products/ services of the entity, significant locations of operation of the entity or the entity as a whole? (Y/ N). Yes, DLF conducts Net Promoter Score (NPS) survey for assessing customer satisfaction and gathering customer feedback. The survey is conducted for both tenants of the leased buildings and customers purchasing the properties, through engaging a third party, covering all major clusters of the real estate portfolio. This helps enhance the understanding of customer perception to continually improve the products and service offerings. 5. \\\\x07Provide the following information relating to data breaches: a. \\\\x07Number of instances of data breaches along-with impact. Nil. b. \\\\x07Percentage of data breaches involving personally identifiable information of customers. Nil. 49 -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_43]' annotations=None\"]",
            "execution_time": "2025-06-15 23:18:31",
            "total_time": "11.045"
          },
          "error": null,
          "perception": {
            "entities": [
              "markitdown",
              "markitdown-mcp",
              "Python",
              "Markdown",
              "file conversion",
              "plugins",
              "Azure Document Intelligence",
              "Docker",
              "Microsoft",
              "DLF",
              "customer satisfaction",
              "data breaches"
            ],
            "result_requirement": "Information about markitdown-mcp and markitdown, including features, usage, and related topics.",
            "original_goal_achieved": false,
            "reasoning": "The step provides a significant amount of information about the 'markitdown' tool and related topics like plugins and Azure Document Intelligence. It also includes information about DLF and customer satisfaction/data breaches, which seems less relevant but could potentially be related in some way, such as through the mention of Microsoft. Combining this with the other search results should bring us closer to answering the user's original query.",
            "local_goal_achieved": true,
            "local_reasoning": "The step successfully extracted text from various sources, including the markitdown GitHub repository and a PDF document from DLF. The extracted text contains relevant information about the requested entities. However, the presence of information about DLF is unexpected and should be checked in future.",
            "last_tooluse_summary": "search_stored_documents_rag success",
            "solution_summary": "Not ready yet",
            "confidence": "0.6"
          },
          "status": "completed",
          "attempts": 0,
          "was_replanned": false,
          "parent_index": null
        }
      ]
    },
    {
      "plan_text": [
        "Step 0: Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
        "Step 1: Search for information about markitdown-mcp and markitdown using duckduckgo_search_results.",
        "Step 2: Combine and summarize the information found from both sources to provide an answer."
      ],
      "steps": [
        {
          "index": 1,
          "description": "Search for information about markitdown-mcp and markitdown using duckduckgo_search_results.",
          "type": "CODE",
          "code": {
            "tool_name": "raw_code_block",
            "tool_arguments": {
              "code": "result = duckduckgo_search_results(\"markitdown-mcp and markitdown\", 5)\nreturn result"
            }
          },
          "conclusion": "",
          "execution_result": {
            "status": "success",
            "result": "['type=\\'text\\' text=\\'{\\\\n  \"result\": \"No results were found for your search query. This could be due to DuckDuckGo\\\\\\'s bot detection or the query returned no matches. Please try rephrasing your search or try again in a few minutes.\"\\\\n}\\' annotations=None']",
            "execution_time": "2025-06-15 23:18:49",
            "total_time": "3.903"
          },
          "error": null,
          "perception": {
            "entities": [
              "markitdown-mcp",
              "markitdown"
            ],
            "result_requirement": "Information about markitdown-mcp and markitdown",
            "original_goal_achieved": false,
            "reasoning": "The search using DuckDuckGo failed, likely due to bot detection or lack of relevant results. This step did not contribute to answering the original query. The tool duckduckgo_search_results failed. This reduces confidence in finding information using search engines directly.",
            "local_goal_achieved": false,
            "local_reasoning": "The DuckDuckGo search returned no results, indicating a failure to retrieve information.",
            "last_tooluse_summary": "duckduckgo_search_results: failure due to no results found or bot detection.",
            "solution_summary": "Not ready yet",
            "confidence": "0.1"
          },
          "status": "completed",
          "attempts": 0,
          "was_replanned": false,
          "parent_index": null
        }
      ]
    },
    {
      "plan_text": [
        "Step 0: Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
        "Step 1: Since duckduckgo_search_results failed, revise the plan to focus on search_stored_documents_rag and summarize.",
        "Step 2: Summarize the information found from search_stored_documents_rag to provide an answer."
      ],
      "steps": [
        {
          "index": 2,
          "description": "Summarize the information found from search_stored_documents_rag to provide an answer.",
          "type": "CODE",
          "code": {
            "tool_name": "raw_code_block",
            "tool_arguments": {
              "code": "result = search_stored_documents_rag(\"markitdown-mcp and markitdown\")\nreturn result"
            }
          },
          "conclusion": "",
          "execution_result": {
            "status": "success",
            "result": "['type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\\'# DELETE IMAGES **Image:** def replace_image(markdown: str) -> str: alt = match.group(1) src = match.group(2) try: caption = get_caption(src) # Attempt to delete only if src is local if not src.startswith(\"http\"): img_path = Path(src).parent / \"documents\" / src if img_path.exists(): log(\"INFO\", f\"Deleted image: {img_path}\") return f\"**{caption}**\" else: log(\"WARN\", f\"Image path does not exist\") return f\"**{caption}**\" except Exception as e: log(\"WARN\", f\"Image could not be processed: {e}\") return re.sub(r\\\\\\'!\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\((.*?)\\\\\\\\)\\\\\\', r\\\\\\'!\\\\\\\\[\\\\\\\\1\\\\\\\\](\\\\\\\\2)\\\\\\', markdown) And that\u2019s how we delete images. -----\\\\n[Source: DELETE_IMAGES.pdf, ID: DELETE_IMAGES_0]\\' annotations=None', 'type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', \"type='text' text='programme includes building/ asset communication, feedback sessions with individual tenants and providing feedback to tenants on efficient energy and water consumption. 3. \\\\x07Mechanisms in place to inform consumers of any risk of disruption/ discontinuation of essential services. Any risk of disruption/ discontinuation of essential services is timely communicated to customers occupying the leased properties, through e-mail communication by the FM Teams. 4. \\\\x07Does the entity display product information on the product over and above what is mandated as per local laws? (Y/ N/ Not Applicable). If yes, provide details in brief. Products of DLF include development of residential homes and development, operation and maintenance of commercial office spaces, retail properties (Malls) and hospitality projects (Hotels and Clubs). Product related information is included in the relevant documents provided to the customers at the time of building handover or while entering into a lease agreement, which is as per the local legislation. Content In addition to this, customers are provided with a user handbook which includes information on building features and guidelines for ensuring safe and responsible usage of buildings. Furthermore, majority of its buildings have received LEED certification in \u2018Operation and Maintenance\u2019 category or \u2018Design and Construction\u2019 category by USGBC. Information related to LEED certifications are displayed in all leased buildings. \\\\x07Did your entity carry out any survey with regard to consumer satisfaction relating to the major products/ services of the entity, significant locations of operation of the entity or the entity as a whole? (Y/ N). Yes, DLF conducts Net Promoter Score (NPS) survey for assessing customer satisfaction and gathering customer feedback. The survey is conducted for both tenants of the leased buildings and customers purchasing the properties, through engaging a third party, covering all major clusters of the real estate portfolio. This helps enhance the understanding of customer perception to continually improve the products and service offerings. 5. \\\\x07Provide the following information relating to data breaches: a. \\\\x07Number of instances of data breaches along-with impact. Nil. b. \\\\x07Percentage of data breaches involving personally identifiable information of customers. Nil. 49 -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_43]' annotations=None\"]",
            "execution_time": "2025-06-15 23:19:00",
            "total_time": "12.562"
          },
          "error": null,
          "perception": {
            "entities": [
              "markitdown",
              "markitdown-mcp",
              "Microsoft",
              "plugins",
              "Azure Document Intelligence",
              "Python",
              "Markdown",
              "Docker",
              "GitHub",
              "GPT-4o"
            ],
            "result_requirement": "Summary of information about markitdown-mcp and markitdown.",
            "original_goal_achieved": false,
            "reasoning": "This step provides the information retrieved from the search_stored_documents_rag tool, which is necessary for summarizing the details about markitdown and markitdown-mcp. The next step is to summarize this information to provide an answer to the user query.",
            "local_goal_achieved": true,
            "local_reasoning": "The search_stored_documents_rag tool successfully retrieved relevant information about markitdown and markitdown-mcp. This step is crucial for providing context to the user.",
            "last_tooluse_summary": "search_stored_documents_rag: success",
            "solution_summary": "Not ready yet",
            "confidence": "0.8"
          },
          "status": "completed",
          "attempts": 0,
          "was_replanned": false,
          "parent_index": null
        }
      ]
    }
  ],
  "state_snapshot": {
    "session_id": "9fc28688-967a-40c7-bf9d-ce745482fb08",
    "query": "Tell me about markitdown-mcp mentioned in markitdown",
    "final_plan": [
      "Step 0: Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
      "Step 1: Since duckduckgo_search_results failed, revise the plan to focus on search_stored_documents_rag and summarize.",
      "Step 2: Summarize the information found from search_stored_documents_rag to provide an answer."
    ],
    "final_steps": [
      {
        "index": 0,
        "description": "Search for information about markitdown-mcp and markitdown using search_stored_documents_rag.",
        "type": "CODE",
        "code": {
          "tool_name": "raw_code_block",
          "tool_arguments": {
            "code": "result = search_stored_documents_rag(\"markitdown-mcp and markitdown\")\nreturn result"
          }
        },
        "conclusion": "",
        "execution_result": {
          "status": "success",
          "result": "['type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\\'# DELETE IMAGES **Image:** def replace_image(markdown: str) -> str: alt = match.group(1) src = match.group(2) try: caption = get_caption(src) # Attempt to delete only if src is local if not src.startswith(\"http\"): img_path = Path(src).parent / \"documents\" / src if img_path.exists(): log(\"INFO\", f\"Deleted image: {img_path}\") return f\"**{caption}**\" else: log(\"WARN\", f\"Image path does not exist\") return f\"**{caption}**\" except Exception as e: log(\"WARN\", f\"Image could not be processed: {e}\") return re.sub(r\\\\\\'!\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\((.*?)\\\\\\\\)\\\\\\', r\\\\\\'!\\\\\\\\[\\\\\\\\1\\\\\\\\](\\\\\\\\2)\\\\\\', markdown) And that\u2019s how we delete images. -----\\\\n[Source: DELETE_IMAGES.pdf, ID: DELETE_IMAGES_0]\\' annotations=None', 'type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', \"type='text' text='programme includes building/ asset communication, feedback sessions with individual tenants and providing feedback to tenants on efficient energy and water consumption. 3. \\\\x07Mechanisms in place to inform consumers of any risk of disruption/ discontinuation of essential services. Any risk of disruption/ discontinuation of essential services is timely communicated to customers occupying the leased properties, through e-mail communication by the FM Teams. 4. \\\\x07Does the entity display product information on the product over and above what is mandated as per local laws? (Y/ N/ Not Applicable). If yes, provide details in brief. Products of DLF include development of residential homes and development, operation and maintenance of commercial office spaces, retail properties (Malls) and hospitality projects (Hotels and Clubs). Product related information is included in the relevant documents provided to the customers at the time of building handover or while entering into a lease agreement, which is as per the local legislation. Content In addition to this, customers are provided with a user handbook which includes information on building features and guidelines for ensuring safe and responsible usage of buildings. Furthermore, majority of its buildings have received LEED certification in \u2018Operation and Maintenance\u2019 category or \u2018Design and Construction\u2019 category by USGBC. Information related to LEED certifications are displayed in all leased buildings. \\\\x07Did your entity carry out any survey with regard to consumer satisfaction relating to the major products/ services of the entity, significant locations of operation of the entity or the entity as a whole? (Y/ N). Yes, DLF conducts Net Promoter Score (NPS) survey for assessing customer satisfaction and gathering customer feedback. The survey is conducted for both tenants of the leased buildings and customers purchasing the properties, through engaging a third party, covering all major clusters of the real estate portfolio. This helps enhance the understanding of customer perception to continually improve the products and service offerings. 5. \\\\x07Provide the following information relating to data breaches: a. \\\\x07Number of instances of data breaches along-with impact. Nil. b. \\\\x07Percentage of data breaches involving personally identifiable information of customers. Nil. 49 -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_43]' annotations=None\"]",
          "execution_time": "2025-06-15 23:18:31",
          "total_time": "11.045"
        },
        "error": null,
        "perception": {
          "entities": [
            "markitdown",
            "markitdown-mcp",
            "Python",
            "Markdown",
            "file conversion",
            "plugins",
            "Azure Document Intelligence",
            "Docker",
            "Microsoft",
            "DLF",
            "customer satisfaction",
            "data breaches"
          ],
          "result_requirement": "Information about markitdown-mcp and markitdown, including features, usage, and related topics.",
          "original_goal_achieved": false,
          "reasoning": "The step provides a significant amount of information about the 'markitdown' tool and related topics like plugins and Azure Document Intelligence. It also includes information about DLF and customer satisfaction/data breaches, which seems less relevant but could potentially be related in some way, such as through the mention of Microsoft. Combining this with the other search results should bring us closer to answering the user's original query.",
          "local_goal_achieved": true,
          "local_reasoning": "The step successfully extracted text from various sources, including the markitdown GitHub repository and a PDF document from DLF. The extracted text contains relevant information about the requested entities. However, the presence of information about DLF is unexpected and should be checked in future.",
          "last_tooluse_summary": "search_stored_documents_rag success",
          "solution_summary": "Not ready yet",
          "confidence": "0.6"
        },
        "status": "completed",
        "attempts": 0,
        "was_replanned": false,
        "parent_index": null
      },
      {
        "index": 1,
        "description": "Search for information about markitdown-mcp and markitdown using duckduckgo_search_results.",
        "type": "CODE",
        "code": {
          "tool_name": "raw_code_block",
          "tool_arguments": {
            "code": "result = duckduckgo_search_results(\"markitdown-mcp and markitdown\", 5)\nreturn result"
          }
        },
        "conclusion": "",
        "execution_result": {
          "status": "success",
          "result": "['type=\\'text\\' text=\\'{\\\\n  \"result\": \"No results were found for your search query. This could be due to DuckDuckGo\\\\\\'s bot detection or the query returned no matches. Please try rephrasing your search or try again in a few minutes.\"\\\\n}\\' annotations=None']",
          "execution_time": "2025-06-15 23:18:49",
          "total_time": "3.903"
        },
        "error": null,
        "perception": {
          "entities": [
            "markitdown-mcp",
            "markitdown"
          ],
          "result_requirement": "Information about markitdown-mcp and markitdown",
          "original_goal_achieved": false,
          "reasoning": "The search using DuckDuckGo failed, likely due to bot detection or lack of relevant results. This step did not contribute to answering the original query. The tool duckduckgo_search_results failed. This reduces confidence in finding information using search engines directly.",
          "local_goal_achieved": false,
          "local_reasoning": "The DuckDuckGo search returned no results, indicating a failure to retrieve information.",
          "last_tooluse_summary": "duckduckgo_search_results: failure due to no results found or bot detection.",
          "solution_summary": "Not ready yet",
          "confidence": "0.1"
        },
        "status": "completed",
        "attempts": 0,
        "was_replanned": false,
        "parent_index": null
      },
      {
        "index": 2,
        "description": "Summarize the information found from search_stored_documents_rag to provide an answer.",
        "type": "CODE",
        "code": {
          "tool_name": "raw_code_block",
          "tool_arguments": {
            "code": "result = search_stored_documents_rag(\"markitdown-mcp and markitdown\")\nreturn result"
          }
        },
        "conclusion": "",
        "execution_result": {
          "status": "success",
          "result": "['type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\\'# DELETE IMAGES **Image:** def replace_image(markdown: str) -> str: alt = match.group(1) src = match.group(2) try: caption = get_caption(src) # Attempt to delete only if src is local if not src.startswith(\"http\"): img_path = Path(src).parent / \"documents\" / src if img_path.exists(): log(\"INFO\", f\"Deleted image: {img_path}\") return f\"**{caption}**\" else: log(\"WARN\", f\"Image path does not exist\") return f\"**{caption}**\" except Exception as e: log(\"WARN\", f\"Image could not be processed: {e}\") return re.sub(r\\\\\\'!\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\((.*?)\\\\\\\\)\\\\\\', r\\\\\\'!\\\\\\\\[\\\\\\\\1\\\\\\\\](\\\\\\\\2)\\\\\\', markdown) And that\u2019s how we delete images. -----\\\\n[Source: DELETE_IMAGES.pdf, ID: DELETE_IMAGES_0]\\' annotations=None', 'type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', \"type='text' text='programme includes building/ asset communication, feedback sessions with individual tenants and providing feedback to tenants on efficient energy and water consumption. 3. \\\\x07Mechanisms in place to inform consumers of any risk of disruption/ discontinuation of essential services. Any risk of disruption/ discontinuation of essential services is timely communicated to customers occupying the leased properties, through e-mail communication by the FM Teams. 4. \\\\x07Does the entity display product information on the product over and above what is mandated as per local laws? (Y/ N/ Not Applicable). If yes, provide details in brief. Products of DLF include development of residential homes and development, operation and maintenance of commercial office spaces, retail properties (Malls) and hospitality projects (Hotels and Clubs). Product related information is included in the relevant documents provided to the customers at the time of building handover or while entering into a lease agreement, which is as per the local legislation. Content In addition to this, customers are provided with a user handbook which includes information on building features and guidelines for ensuring safe and responsible usage of buildings. Furthermore, majority of its buildings have received LEED certification in \u2018Operation and Maintenance\u2019 category or \u2018Design and Construction\u2019 category by USGBC. Information related to LEED certifications are displayed in all leased buildings. \\\\x07Did your entity carry out any survey with regard to consumer satisfaction relating to the major products/ services of the entity, significant locations of operation of the entity or the entity as a whole? (Y/ N). Yes, DLF conducts Net Promoter Score (NPS) survey for assessing customer satisfaction and gathering customer feedback. The survey is conducted for both tenants of the leased buildings and customers purchasing the properties, through engaging a third party, covering all major clusters of the real estate portfolio. This helps enhance the understanding of customer perception to continually improve the products and service offerings. 5. \\\\x07Provide the following information relating to data breaches: a. \\\\x07Number of instances of data breaches along-with impact. Nil. b. \\\\x07Percentage of data breaches involving personally identifiable information of customers. Nil. 49 -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_43]' annotations=None\"]",
          "execution_time": "2025-06-15 23:19:00",
          "total_time": "12.562"
        },
        "error": null,
        "perception": {
          "entities": [
            "markitdown",
            "markitdown-mcp",
            "Microsoft",
            "plugins",
            "Azure Document Intelligence",
            "Python",
            "Markdown",
            "Docker",
            "GitHub",
            "GPT-4o"
          ],
          "result_requirement": "Summary of information about markitdown-mcp and markitdown.",
          "original_goal_achieved": false,
          "reasoning": "This step provides the information retrieved from the search_stored_documents_rag tool, which is necessary for summarizing the details about markitdown and markitdown-mcp. The next step is to summarize this information to provide an answer to the user query.",
          "local_goal_achieved": true,
          "local_reasoning": "The search_stored_documents_rag tool successfully retrieved relevant information about markitdown and markitdown-mcp. This step is crucial for providing context to the user.",
          "last_tooluse_summary": "search_stored_documents_rag: success",
          "solution_summary": "Not ready yet",
          "confidence": "0.8"
        },
        "status": "completed",
        "attempts": 0,
        "was_replanned": false,
        "parent_index": null
      }
    ],
    "final_answer": null,
    "confidence": 0.0,
    "reasoning_note": ""
  },
  "_session_id_short": "9fc28688"
}