{
  "session_id": "44dfec9f-f023-402b-81f1-c55e399c660e",
  "original_query": "What does markitdown say about Running Tests and Checks?",
  "perception": {
    "entities": [
      "markitdown",
      "Running Tests",
      "Checks"
    ],
    "result_requirement": "Information from 'markitdown' documentation about running tests and checks.",
    "original_goal_achieved": false,
    "reasoning": "The user is asking for specific information about 'markitdown' related to running tests and checks. This likely requires accessing documentation or other resources related to 'markitdown' to extract the relevant information. The query is not directly answerable without external information retrieval.",
    "local_goal_achieved": false,
    "local_reasoning": "The user query requires external information to be retrieved and processed. No information is currently available to satisfy the query.",
    "last_tooluse_summary": "Not applicable.",
    "solution_summary": "Not ready yet.",
    "confidence": "0.5"
  },
  "plan_versions": [
    {
      "plan_text": [
        "Step 0: Use RAG to search for 'markitdown' documentation about Running Tests and Checks.",
        "Step 1: If the RAG search is insufficient, try DuckDuckGo search.",
        "Step 2: Extract and summarize the relevant information from the search results."
      ],
      "steps": [
        {
          "index": 0,
          "description": "Use RAG to search for 'markitdown' documentation about Running Tests and Checks.",
          "type": "CODE",
          "code": {
            "tool_name": "raw_code_block",
            "tool_arguments": {
              "code": "result = search_stored_documents_rag(\"markitdown Running Tests and Checks\")\nreturn result"
            }
          },
          "conclusion": "",
          "execution_result": {
            "status": "success",
            "result": "['type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', \"type='text' text='Testing and Calibration Laboratories approved Lab for Rental Assets. 6. \\\\x07Provide details of greenhouse gas emissions (Scope 1 and Scope 2 emissions) and its intensity, in the following format [11] : |Parameter|Unit|FY 2022-23|FY 2021-22| |---|---|---|---| |Total Scope 1 emissions|Metric tonnes of CO2 equivalent|20,440.28|72,014.10| |Total Scope 2 emissions|Metric tonnes of CO2 equivalent|3,28,646.33|2,51,629.45| |Total Scope 1 and Scope 2 emissions per rupee of turnover12|Metric tonnes of CO2 equivalent per rupee of turnover|0.0000061|0.0000057| |Total Scope 1 and Scope 2 emissions per area of total portfolio (Total Scope 1 and Scope 2 emissions in tCOe/ area of portfolio (including total 2 leasable and saleable area in sq. mtr.)|Metric tonnes of CO2 equivalent per square metre of portfolio (including total leasable and saleable area in sq. mtr.)|0.046|0.048| Note: Indicate if any independent assessment/ evaluation/ assurance has been carried out by an external agency? (Y/ N). If yes, name of the external agency. No. 11 \\\\x07For data reported under Principle 6, the boundary includes all DLF\u2019s rental portfolio, hospitality portfolio and those development projects where construction was ongoing in FY 2022-23. For projects where construction was completed in FY 2021-22 (saleable properties), have not been included in this boundary. DLF continues to further strengthen its data monitoring systems for all development projects. 12 \\\\x07Turnover is total revenue from operations. However, it may be noted that as per the accounting standards, the revenue of DLF Cyber City Developers Limited (DCCDL), a material subsidiary of the Company is not consolidated in the Consolidated Turnover and is accounted as a Joint Venture. 34 Content -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_30]' annotations=None\", \"type='text' text='13 Content ----- DLF ANNUAL REPORT 2022 - 23 Business Responsibility and Sustainability Report Table 3 - Annexure to 5 and 6 - Progress on Targets |Material Topic|Targets|FY 2023 Progress|Target Status| |---|---|---|---| |Environmental Stewardship|Ensure compliance with the green building certification guidelines while designing and developing new buildings.|Compliance with the green building certification guidelines, was ensured for relevant projects in FY 2022-23. \u2022 DLF\u2019s New project Arbour received LEED Platinum Rating by IGBC (Pre-Certification). \u2022 DLF Downtown, Gurugram and DLF Downtown, Chennai received LEED Platinum Rating by USGBC (Pre-Certifci ation).|In-Progress7| ||By 2030, to reduce energy intensity in DLF\u2019s rental assets (energy consumption per square feet of rental portfolio) by 15% using FY 2019-20 as baseline.|0.0129 MWh/ sq.ft energy intensity in rental assets (energy consumption in MWh per square feet of rental portfolio) in FY 2022-23.|In-Progress7| ||By 2025, increase renewable energy intensity in DLF\u2019s rental assets by 20% using FY 2019-20 as baseline.|0.0020 MWh/ sq.ft. renewable energy intensity in rental assets (energy consumption from renewable sources in MWh per square feet of rental portfolio) in FY 2022-23, which increased by 8.12% from the baseline.|In-Progress7| ||By 2025, reduce water intensity in DLF\u2019s rental assets (freshwater consumption per square feet of rental portfolio) by 10% using FY 2019-20 as baseline.|0.0583 KL/ sq.ft. water intensity in the rental assets (freshwater consumption in KL per square feet of rental portfolio) in FY 2022-23, which decreased by 30.73% from the baseline.|Achieved7| |Social Stewardship|To ensure zero harm each year, i.e. zero fatalities resulting from operations, each year, including operation and maintenance of portfolio and development of assets (construction).|Zero harm status maintained in FY 2022-23, i.e. there were no fatalities or lost time injuries resulting from operations, including both operation and maintenance of portfolio and development of assets (construction).|Achieved7| |Sustainable Business|Ensure compliance with all regulatory requirements.|Compliance with all regulatory requirements maintained in FY 2022-23.|Achieved7| ||By 2030, ensure that at least 90% of total rental portfolio is Green Building certified.|40.4 Mn. Sq.ft. or 99.05% of rental portfolio is LEED Platinum Certifei d as on 31 March 2023.|In-Progress7| 7 This is an annual target which was achieved for FY 2022-23. 14 Content ----- **SECTION C: PRINCIPLE WISE PERFORMANCE DISCLOSURE** PRINCIPLE 1: Businesses should conduct and govern themselves with integrity and in a manner that is Ethical, Transparent and Accountable. **Essential Indicators** 1. Percentage coverage by training and awareness programmes on any of the Principles during the FY: |Segment|Total number of training and awareness programmes held|Topics/ principles covered under the training and its impact|%age of persons in respective category covered by the awareness programmes| |---|---|---|---| |Board of Directors (BoDs)|15|\u2022 \\\\x07Regulatory Updates, Risk Management and Business Development.|100%| |Key Managerial Personnel (KMPs)|3|\u2022 DLF Code of Conduct. \u2022 \\\\x07Prevention of Sexual Harassment at Workplace. \u2022 \\\\x07SEBI (Prohibition of Insider Trading) Regulations, 2015.|100%| |Employees other than BoDs & KMPs|11|\u2022 DLF Code of Conduct. \u2022 \\\\x07Prevention of Sexual Harassment at Workplace. \u2022 \\\\x07Health, Safety, Security and Environment. \u2022 Environment Management. \u2022 \\\\x07Awareness on Standard Operating Procedures for safety. \u2022 Work at Height. \u2022 Electrical Safety. \u2022 \\\\x07Emergency Response Management. \u2022 \\\\x07Safety Hazard Identification and Risk Assessment. \u2022 R\\\\x07 esponsible\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_11]' annotations=None\"]",
            "execution_time": "2025-06-15 21:42:51",
            "total_time": "11.315"
          },
          "error": null,
          "perception": {
            "entities": [
              "markitdown",
              "Python",
              "Markdown",
              "file conversion",
              "testing",
              "checks",
              "plugins",
              "Azure Document Intelligence",
              "Docker",
              "GitHub",
              "Contributor License Agreement",
              "Microsoft Open Source Code of Conduct"
            ],
            "result_requirement": "Information about running tests and checks for the 'markitdown' Python tool.",
            "original_goal_achieved": false,
            "reasoning": "The step provides a detailed overview of the 'markitdown' tool, including installation, usage, and contribution guidelines. It includes a section on running tests and checks, fulfilling the original objective. However, the information is embedded within a larger document, and still requires summarization.",
            "local_goal_achieved": true,
            "local_reasoning": "The step successfully retrieved the documentation for 'markitdown', providing the context needed to extract information about running tests and checks. The full documentation was parsed.",
            "last_tooluse_summary": "RAG SUCCESS",
            "solution_summary": "Not ready yet.",
            "confidence": "0.75"
          },
          "status": "completed",
          "attempts": 0,
          "was_replanned": false,
          "parent_index": null
        }
      ]
    },
    {
      "plan_text": [
        "Step 0: Use RAG to search for 'markitdown' documentation about Running Tests and Checks.",
        "Step 1: If the RAG search is insufficient, try DuckDuckGo search.",
        "Step 2: Extract and summarize the relevant information from the search results."
      ],
      "steps": [
        {
          "index": 1,
          "description": "Since the first step was successful and provided the necessary information, extract the relevant section about running tests and checks from the RAG results.",
          "type": "CODE",
          "code": {
            "tool_name": "raw_code_block",
            "tool_arguments": {
              "code": "rag_results = search_stored_documents_rag(\"markitdown Running Tests and Checks\")\nimport re\nmatch = re.search(r'### Running Tests and Checks.*?Run pre-commit checks before submitting a PR: `pre-commit run --all-files`', str(rag_results), re.DOTALL)\nif match:\n    extracted_text = match.group(0)\n    result = extracted_text\nelse:\n    result = \"Could not find specific information about running tests and checks.\"\nreturn result"
            }
          },
          "conclusion": "",
          "execution_result": {
            "status": "success",
            "result": "### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files`",
            "execution_time": "2025-06-15 21:43:11",
            "total_time": "10.947"
          },
          "error": null,
          "perception": {
            "entities": [
              "MarkItDown",
              "hatch",
              "pre-commit",
              "Devcontainer"
            ],
            "result_requirement": "Steps to run tests and checks for the MarkItDown package.",
            "original_goal_achieved": true,
            "reasoning": "The documentation provides clear instructions on how to run tests and checks for the MarkItDown package using `hatch` and `pre-commit`, as well as an alternative method using Devcontainer. This fulfills the user's likely need for instructions.",
            "local_goal_achieved": true,
            "local_reasoning": "The step successfully retrieved the relevant documentation about running tests and checks for the MarkItDown package.",
            "last_tooluse_summary": "RAG: success",
            "solution_summary": "To run tests and checks for the MarkItDown package, use `hatch` or the Devcontainer. Install `hatch` and run tests: `pip install hatch; hatch shell; hatch test`. Alternatively, use the Devcontainer. Run pre-commit checks: `pre-commit run --all-files`.",
            "confidence": "1.0"
          },
          "status": "completed",
          "attempts": 0,
          "was_replanned": false,
          "parent_index": null
        }
      ]
    }
  ],
  "state_snapshot": {
    "session_id": "44dfec9f-f023-402b-81f1-c55e399c660e",
    "query": "What does markitdown say about Running Tests and Checks?",
    "final_plan": [
      "Step 0: Use RAG to search for 'markitdown' documentation about Running Tests and Checks.",
      "Step 1: If the RAG search is insufficient, try DuckDuckGo search.",
      "Step 2: Extract and summarize the relevant information from the search results."
    ],
    "final_steps": [
      {
        "index": 0,
        "description": "Use RAG to search for 'markitdown' documentation about Running Tests and Checks.",
        "type": "CODE",
        "code": {
          "tool_name": "raw_code_block",
          "tool_arguments": {
            "code": "result = search_stored_documents_rag(\"markitdown Running Tests and Checks\")\nreturn result"
          }
        },
        "conclusion": "",
        "execution_result": {
          "status": "success",
          "result": "['type=\\'text\\' text=\\'`[pptx]` Installs dependencies for PowerPoint files * `[docx]` Installs dependencies for Word files * `[xlsx]` Installs dependencies for Excel files * `[xls]` Installs dependencies for older Excel files * `[pdf]` Installs dependencies for PDF files * `[outlook]` Installs dependencies for Outlook messages * `[az-doc-intel]` Installs dependencies for Azure Document Intelligence * `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files * `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription ### Plugins [](#plugins) MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: ``` markitdown --list-plugins ``` To enable plugins use: ``` markitdown --use-plugins path-to-file.pdf ``` To find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`. ### Azure Document Intelligence [](#azure-document-intelligence) To use Microsoft Document Intelligence for conversion: ``` markitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\" ``` More information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0) ### Python API [](#python-api) Basic usage in Python: ``` from markitdown import MarkItDown md = MarkItDown(enable_plugins=False) # Set to True to enable plugins result = md.convert(\"test.xlsx\") print(result.text_content) ``` Document Intelligence conversion in Python: ``` from markitdown import MarkItDown md = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\") result = md.convert(\"test.pdf\") print(result.text_content) ``` To use Large Language Models for image descriptions, provide `llm_client` and `llm_model`: ``` from markitdown import MarkItDown from openai import OpenAI client = OpenAI() md = MarkItDown(llm_client=client, llm_model=\"gpt-4o\") result = md.convert(\"example.jpg\") print(result.text_content) ``` ### Docker [](#docker) ``` docker build -t markitdown:latest . docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md ``` Contributing ------------ [](#contributing) This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.opensource.microsoft.com](https://cla.opensource.microsoft.com/). When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments. ### How to Contribute [](#how-to-contribute) You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as \\\\\\'open for contribution\\\\\\' and \\\\\\'open for reviewing\\\\\\' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. ### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files` ### Contributing 3rd-party Plugins [](#contributing-3rd-party-plugins) You can also contribute by creating\\\\n[Source: markitdown.md, ID: markitdown_1]\\' annotations=None', 'type=\\'text\\' text=\\'# GitHub - microsoft/markitdown: Python tool for converting files and office documents to Markdown. MarkItDown ---------- [](#markitdown) [![PyPI](https://camo.githubusercontent.com/dc0da41c73f99c7f5844824f7b1f162a234d34d9d91862138c3d5d635a6caf05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b6974646f776e2e737667)](https://pypi.org/project/markitdown/) [![PyPI - Downloads](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e)](https://camo.githubusercontent.com/f0fc71dd711009ab40f97028f91deb005628d978f2ee6b85721c0382177d0de2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f6d61726b6974646f776e) [![Built by AutoGen Team](https://camo.githubusercontent.com/8ae6370b68c34b66768191de769f8cc1995cdf9133678230a30e9b6b090cb131/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d4175746f47656e2532305465616d2d626c7565)](https://github.com/microsoft/autogen) Tip MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information. Important Breaking changes between 0.0.1 to 0.1.0: * Dependencies are now organized into optional feature-groups (further details below). Use `pip install \\\\\\'markitdown[all]\\\\\\'` to have backward-compatible behavior. * convert\\\\\\\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. _No temporary files are created anymore_. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. At present, MarkItDown supports: * PDF * PowerPoint * Word * Excel * Images (EXIF metadata and OCR) * Audio (EXIF metadata and speech transcription) * HTML * Text-based formats (CSV, JSON, XML) * ZIP files (iterates over contents) * Youtube URLs * EPubs * ... and more! Why Markdown? ------------- [](#why-markdown) Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI\\\\\\'s GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Installation ------------ [](#installation) To install MarkItDown, use pip: `pip install \\\\\\'markitdown[all]\\\\\\'`. Alternatively, you can install it from the source: ``` git clone git@github.com:microsoft/markitdown.git cd markitdown pip install -e \\\\\\'packages/markitdown[all]\\\\\\' ``` Usage ----- [](#usage) ### Command-Line [](#command-line) ``` markitdown path-to-file.pdf > document.md ``` Or use `-o` to specify the output file: ``` markitdown path-to-file.pdf -o document.md ``` You can also pipe content: ``` cat path-to-file.pdf | markitdown ``` ### Optional Dependencies [](#optional-dependencies) MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example: ``` pip install \\\\\\'markitdown[pdf, docx, pptx]\\\\\\' ``` will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: * `[all]` Installs all optional dependencies *\\\\n[Source: markitdown.md, ID: markitdown_0]\\' annotations=None', 'type=\\'text\\' text=\"and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details. Trademarks ---------- [](#trademarks) This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft\\'s Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party\\'s policies.\\\\n[Source: markitdown.md, ID: markitdown_2]\" annotations=None', \"type='text' text='Testing and Calibration Laboratories approved Lab for Rental Assets. 6. \\\\x07Provide details of greenhouse gas emissions (Scope 1 and Scope 2 emissions) and its intensity, in the following format [11] : |Parameter|Unit|FY 2022-23|FY 2021-22| |---|---|---|---| |Total Scope 1 emissions|Metric tonnes of CO2 equivalent|20,440.28|72,014.10| |Total Scope 2 emissions|Metric tonnes of CO2 equivalent|3,28,646.33|2,51,629.45| |Total Scope 1 and Scope 2 emissions per rupee of turnover12|Metric tonnes of CO2 equivalent per rupee of turnover|0.0000061|0.0000057| |Total Scope 1 and Scope 2 emissions per area of total portfolio (Total Scope 1 and Scope 2 emissions in tCOe/ area of portfolio (including total 2 leasable and saleable area in sq. mtr.)|Metric tonnes of CO2 equivalent per square metre of portfolio (including total leasable and saleable area in sq. mtr.)|0.046|0.048| Note: Indicate if any independent assessment/ evaluation/ assurance has been carried out by an external agency? (Y/ N). If yes, name of the external agency. No. 11 \\\\x07For data reported under Principle 6, the boundary includes all DLF\u2019s rental portfolio, hospitality portfolio and those development projects where construction was ongoing in FY 2022-23. For projects where construction was completed in FY 2021-22 (saleable properties), have not been included in this boundary. DLF continues to further strengthen its data monitoring systems for all development projects. 12 \\\\x07Turnover is total revenue from operations. However, it may be noted that as per the accounting standards, the revenue of DLF Cyber City Developers Limited (DCCDL), a material subsidiary of the Company is not consolidated in the Consolidated Turnover and is accounted as a Joint Venture. 34 Content -----\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_30]' annotations=None\", \"type='text' text='13 Content ----- DLF ANNUAL REPORT 2022 - 23 Business Responsibility and Sustainability Report Table 3 - Annexure to 5 and 6 - Progress on Targets |Material Topic|Targets|FY 2023 Progress|Target Status| |---|---|---|---| |Environmental Stewardship|Ensure compliance with the green building certification guidelines while designing and developing new buildings.|Compliance with the green building certification guidelines, was ensured for relevant projects in FY 2022-23. \u2022 DLF\u2019s New project Arbour received LEED Platinum Rating by IGBC (Pre-Certification). \u2022 DLF Downtown, Gurugram and DLF Downtown, Chennai received LEED Platinum Rating by USGBC (Pre-Certifci ation).|In-Progress7| ||By 2030, to reduce energy intensity in DLF\u2019s rental assets (energy consumption per square feet of rental portfolio) by 15% using FY 2019-20 as baseline.|0.0129 MWh/ sq.ft energy intensity in rental assets (energy consumption in MWh per square feet of rental portfolio) in FY 2022-23.|In-Progress7| ||By 2025, increase renewable energy intensity in DLF\u2019s rental assets by 20% using FY 2019-20 as baseline.|0.0020 MWh/ sq.ft. renewable energy intensity in rental assets (energy consumption from renewable sources in MWh per square feet of rental portfolio) in FY 2022-23, which increased by 8.12% from the baseline.|In-Progress7| ||By 2025, reduce water intensity in DLF\u2019s rental assets (freshwater consumption per square feet of rental portfolio) by 10% using FY 2019-20 as baseline.|0.0583 KL/ sq.ft. water intensity in the rental assets (freshwater consumption in KL per square feet of rental portfolio) in FY 2022-23, which decreased by 30.73% from the baseline.|Achieved7| |Social Stewardship|To ensure zero harm each year, i.e. zero fatalities resulting from operations, each year, including operation and maintenance of portfolio and development of assets (construction).|Zero harm status maintained in FY 2022-23, i.e. there were no fatalities or lost time injuries resulting from operations, including both operation and maintenance of portfolio and development of assets (construction).|Achieved7| |Sustainable Business|Ensure compliance with all regulatory requirements.|Compliance with all regulatory requirements maintained in FY 2022-23.|Achieved7| ||By 2030, ensure that at least 90% of total rental portfolio is Green Building certified.|40.4 Mn. Sq.ft. or 99.05% of rental portfolio is LEED Platinum Certifei d as on 31 March 2023.|In-Progress7| 7 This is an annual target which was achieved for FY 2022-23. 14 Content ----- **SECTION C: PRINCIPLE WISE PERFORMANCE DISCLOSURE** PRINCIPLE 1: Businesses should conduct and govern themselves with integrity and in a manner that is Ethical, Transparent and Accountable. **Essential Indicators** 1. Percentage coverage by training and awareness programmes on any of the Principles during the FY: |Segment|Total number of training and awareness programmes held|Topics/ principles covered under the training and its impact|%age of persons in respective category covered by the awareness programmes| |---|---|---|---| |Board of Directors (BoDs)|15|\u2022 \\\\x07Regulatory Updates, Risk Management and Business Development.|100%| |Key Managerial Personnel (KMPs)|3|\u2022 DLF Code of Conduct. \u2022 \\\\x07Prevention of Sexual Harassment at Workplace. \u2022 \\\\x07SEBI (Prohibition of Insider Trading) Regulations, 2015.|100%| |Employees other than BoDs & KMPs|11|\u2022 DLF Code of Conduct. \u2022 \\\\x07Prevention of Sexual Harassment at Workplace. \u2022 \\\\x07Health, Safety, Security and Environment. \u2022 Environment Management. \u2022 \\\\x07Awareness on Standard Operating Procedures for safety. \u2022 Work at Height. \u2022 Electrical Safety. \u2022 \\\\x07Emergency Response Management. \u2022 \\\\x07Safety Hazard Identification and Risk Assessment. \u2022 R\\\\x07 esponsible\\\\n[Source: DLF_13072023190044_BRSR.pdf, ID: DLF_13072023190044_BRSR_11]' annotations=None\"]",
          "execution_time": "2025-06-15 21:42:51",
          "total_time": "11.315"
        },
        "error": null,
        "perception": {
          "entities": [
            "markitdown",
            "Python",
            "Markdown",
            "file conversion",
            "testing",
            "checks",
            "plugins",
            "Azure Document Intelligence",
            "Docker",
            "GitHub",
            "Contributor License Agreement",
            "Microsoft Open Source Code of Conduct"
          ],
          "result_requirement": "Information about running tests and checks for the 'markitdown' Python tool.",
          "original_goal_achieved": false,
          "reasoning": "The step provides a detailed overview of the 'markitdown' tool, including installation, usage, and contribution guidelines. It includes a section on running tests and checks, fulfilling the original objective. However, the information is embedded within a larger document, and still requires summarization.",
          "local_goal_achieved": true,
          "local_reasoning": "The step successfully retrieved the documentation for 'markitdown', providing the context needed to extract information about running tests and checks. The full documentation was parsed.",
          "last_tooluse_summary": "RAG SUCCESS",
          "solution_summary": "Not ready yet.",
          "confidence": "0.75"
        },
        "status": "completed",
        "attempts": 0,
        "was_replanned": false,
        "parent_index": null
      },
      {
        "index": 1,
        "description": "Since the first step was successful and provided the necessary information, extract the relevant section about running tests and checks from the RAG results.",
        "type": "CODE",
        "code": {
          "tool_name": "raw_code_block",
          "tool_arguments": {
            "code": "rag_results = search_stored_documents_rag(\"markitdown Running Tests and Checks\")\nimport re\nmatch = re.search(r'### Running Tests and Checks.*?Run pre-commit checks before submitting a PR: `pre-commit run --all-files`', str(rag_results), re.DOTALL)\nif match:\n    extracted_text = match.group(0)\n    result = extracted_text\nelse:\n    result = \"Could not find specific information about running tests and checks.\"\nreturn result"
          }
        },
        "conclusion": "",
        "execution_result": {
          "status": "success",
          "result": "### Running Tests and Checks [](#running-tests-and-checks) * Navigate to the MarkItDown package: * Install `hatch` in your environment and run tests: ``` pip install hatch # Other ways of installing hatch: https://hatch.pypa.io/dev/install/ hatch shell hatch test ``` (Alternative) Use the Devcontainer which has all the dependencies installed: ``` # Reopen the project in Devcontainer and run: hatch test ``` * Run pre-commit checks before submitting a PR: `pre-commit run --all-files`",
          "execution_time": "2025-06-15 21:43:11",
          "total_time": "10.947"
        },
        "error": null,
        "perception": {
          "entities": [
            "MarkItDown",
            "hatch",
            "pre-commit",
            "Devcontainer"
          ],
          "result_requirement": "Steps to run tests and checks for the MarkItDown package.",
          "original_goal_achieved": true,
          "reasoning": "The documentation provides clear instructions on how to run tests and checks for the MarkItDown package using `hatch` and `pre-commit`, as well as an alternative method using Devcontainer. This fulfills the user's likely need for instructions.",
          "local_goal_achieved": true,
          "local_reasoning": "The step successfully retrieved the relevant documentation about running tests and checks for the MarkItDown package.",
          "last_tooluse_summary": "RAG: success",
          "solution_summary": "To run tests and checks for the MarkItDown package, use `hatch` or the Devcontainer. Install `hatch` and run tests: `pip install hatch; hatch shell; hatch test`. Alternatively, use the Devcontainer. Run pre-commit checks: `pre-commit run --all-files`.",
          "confidence": "1.0"
        },
        "status": "completed",
        "attempts": 0,
        "was_replanned": false,
        "parent_index": null
      }
    ],
    "final_answer": "To run tests and checks for the MarkItDown package, use `hatch` or the Devcontainer. Install `hatch` and run tests: `pip install hatch; hatch shell; hatch test`. Alternatively, use the Devcontainer. Run pre-commit checks: `pre-commit run --all-files`.",
    "confidence": "1.0",
    "reasoning_note": "The documentation provides clear instructions on how to run tests and checks for the MarkItDown package using `hatch` and `pre-commit`, as well as an alternative method using Devcontainer. This fulfills the user's likely need for instructions."
  },
  "_session_id_short": "44dfec9f"
}